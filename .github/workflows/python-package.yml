name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Create virtual environment
      run: uv venv
        
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        make install-dev
        
    - name: Lint and format check
      run: |
        source .venv/bin/activate
        make check
        
    - name: Run core tests
      run: |
        source .venv/bin/activate
        make test-core

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Create virtual environment
      run: uv venv
        
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        make install-dev
        
    - name: Build package
      run: |
        source .venv/bin/activate
        make build
        
    - name: Validate distribution
      run: |
        source .venv/bin/activate
        make check-dist
        
    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist

  publish-test:
    needs: build
    runs-on: ubuntu-latest
    # Publish to Test PyPI on pushes to main/master (not tags)
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && !startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Create virtual environment
      run: uv venv
        
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist
        
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        make ensure-twine
        
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        source .venv/bin/activate
        uv run twine upload --repository testpypi dist/*

  publish:
    needs: build
    runs-on: ubuntu-latest
    # Only publish to PyPI on tag pushes
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Create virtual environment
      run: uv venv
        
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist
        
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        make ensure-twine
        
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        source .venv/bin/activate
        uv run twine upload dist/*